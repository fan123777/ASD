#pragma once

namespace nsSearch
{
	// Поразрядный поиск 
	namespace nsBitwiseSearch
	{
		void main();

		// В нескольких методах поиска обработка ведется за счет исследования ключей поиска по небольшим фрагментам за раз вместо того, чтобы на каждом шаге сравнивать полные значения ключей.
		// Эти методы носят название поразрядного поиска(radix - search) и работают аналогично методам поразрядной сортировки, которые рассматривались в главе 10.
		// Они удобны, когда фрагменты ключей поискалегкодоступны, и могут обеспечить эффективные решения для множества реальных применений поиска.
		// В данном случае применяется та же абстрактная модель, которая использовалась в главе 10:
		// в зависимости от контекста ключ может быть словом(последовательностью байтов фиксированной длины) или строкой(последовательностью байтов переменной длины).
		// Принципиальные преимущества методов поразрядного поиска заключается в следующем:
		// они обеспечивают приемлемую производительность для худшего случая без сложностей, присущих сбалансированным деревьям;
		// они обеспечивают простой способ обработки ключей переменной длины;
		// некоторые из них позволяют экономить память, сохраняя часть ключа внутри поисковой структуры;
		// они могут обеспечить быстрый доступ к данным, конкурируя как с деревьями бинарного поиска (BST-деревьями), так и с хешированием.
		
		// 15.1 Деревья цифрового поиска 
		// Простейший метод поразрядного поиска основан на использовании деревьев цифрового поиска(digital search trees — DST), на которые в дальнейшем будем ссылаться как на DST - деревья.
		// Алгоритмы поиска и вставки аналогичны поиску в бинарном дереве, за исключением одного различия:
		// ветвление в дереве выполняется не в соответствии с результатом сравнения полных ключей, а в соответствии с выбранными разрядами ключа.
		// На первом уровне используется ведущий разряд;
		// на втором уровне используется разряд, следующий за ведущим, и т.д., пока не встретится внешний узел.
		// ...604
	}
}
