#pragma once

namespace nsDataStructures
{
	// Абстрактные типы данных
	namespace nsAbstractDataTypes
	{
		void main();

		// Программа 4.2 Программа-клиент для класса POINT (нахождение ближайшей точки)
		void program2();

		template <class Item>
		void exch(Item &x, Item &y);

		// Для разработки нового уровня абстракции потребуется определить абстрактные объекты, с которыми необходимо манипулировать, и операции, которые должны выполняться над ними;
		// мы должны представить данные в некоторой структуре данных и реализовать операции;
		// Определение 4.1 Абстрактный тип данных (АТД) — это тип данных (набор значений и совокупность операций для этих значений), доступ к которому осуществляется только через интерфейс.
		// Программу, которая использует АТД, будем называть клиентом, а программу, в которой содержится спецификация этого типа данных - реализацией.
		// friend float distance(POINT, POINT);
		// Дружественная(friend) функция — это функция, которая, не будучи членом класса, имеет доступ к его приватным членам.
		// объявления общедоступных функций в классе образуют его интерфейс.
		
		// 4.1 Абстрактные объекты и коллекции объектов
		// Многие структуры данных и алгоритмы применяются для реализации фундаментальных АТД, представляющих собой коллекции абстрактных объектов и создаваемых на основе двух следующих операций:
		// - вставить новый объект в коллекцию
		// - удалить объект из коллекции
		// Такие АТД называются обобщенными очередями (generalized queues).
		// Как правило, для удобства в них также явно включаются следующие операции : создать(construct) структуру данных(конструкторы), подсчитать(count) количество объектов в структуре данных(или просто проверить, не пуста ли она).
		// Могут потребоваться и операции, наподобие уничтожить(destroy) структуру данных(деструкторы) и копировать(сору) структуру данных(конструкторы копирования);
		// В разделе 4.2 исследуется стек магазинного типа (pushdown stack), в котором для удаления объектов используется следующее правило : всегда удаляется объект, добавленный последним.
		
		// 4.2 АТД для стека магазинного типа
		// Определение 4.2 Стек магазинного типа — это АТД, который включает две основные операции : вставить, или затолкнуть(push) новый элемент и удалить, или вытолкнуть(pop) элемент, вставленный последним.
		// последним пришел, первым ушел (last-in, first-out, сокращенно LIFO).
		// 



	}
}
