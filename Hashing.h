#pragma once

namespace nsSearch
{
	// Хеширование
	namespace nsHashing
	{
		void main();

		// Программа 14.1 Хеш - функция для дроковых ключей
		int hash(char *v, int M);

		// Программа 14.2 Универсальная хеш - функция(для строковых ключей)
		int hashU(char *v, int M);



		// В этой главе мы рассмотрим хеширование(hashing) — расширенный вариант поиска с использованием индексирования по ключу, применяемый в более типовых приложениях поиска, в которых не приходится рассчитывать на наличие ключей со столь удобными свойствами.
		// Алгоритмы поиска, которые используют хеширование, состоят из двух отдельных частей.Первый шаг — вычисление хеш - функции, которая преобразует ключ поиска в адрес в таблице.
		// В идеале различные ключи должны были бы отображаться на различные адреса, но часто два и более различных ключа могут преобразовываться в один и тот же адрес в таблице.
		// Поэтому вторая часть поиска методом хеширования — процесс разрешения конфликтов, который обрабатывает такие ключи.
		// Хеширование — хороший пример компромисса между временем и объемом памяти.
		// Это ожидаемое постоянное время выполнения — теоретический оптимум производительности для любой реализации таблицы символов, но хеширование не является панацеей по двум основным причинам.
		// Во - первых, время выполнения зависит от длины ключа, которая может быть значительной в реальных приложениях, использующих длинные ключи.
		// Во - вторых, хеширование не обеспечивает эффективные реализации для других операций, таких как select или sort, с таблицами символов.

		// 14.1 Хеш-функции
		// При наличии таблицы, которая может содержать М элементов, нам требуется функция, которая преобразует ключи в целые числа в диапазоне[О, М— 1].
		// Идеальную хешфункцию легко вычислить и аппроксимировать случайной функцией: для любого вводимого значения в определенном смысле выводимое значение должно быть равновероятным.
		// Строго говоря, для каждого вида ключей, который может использоваться, требуется отдельная хеш - функция.
		// Вероятно, простейшей является ситуация, когда ключами являются числа с плавающей точкой, заведомо относящиеся к фиксированному диапазону.
		// Например, если ключи — числа, которые больше 0 и меньше 1, их можно просто умножить на М, округлить до ближайшего целого числа и получить адрес в диапазоне между 0 и М— 1;
		// Если ключи больше s и меньше t, их можно масштабировать, вычтя s и разделив на t — s, в результате чего они попадут в диапазон значений между 0 и 1, а затем умножить на М для получения адреса в таблице.
		// Такие функции бесполезны для хеширования, если только ключи не распределены по диапазону равномерно, поскольку хешзначение определяется только ведущими цифрами ключа.
		// Более простой и эффективный метод для w-разрядных целых чисел — один из, вероятно, наиболее часто используемых методов хеширования — выбор в качестве размера М таблицы простого числа и вычисление остатка от деления k на M, или h(k) = k mod M для любого целочисленного ключа k.
		// Такая функция называется модульной хеш - функцией.
		// Модульное хеширование применяется во всех случаях, когда имеется доступ к разрядам, образующим ключи, независимо от того, являются ли они целыми числами, представленными машинным словом, последовательностью символов, упакованных в машинное слово, или представлены одним из множества других возможных вариантов.
		// Модульное хеширование весьма просто реализовать, за исключением того, что размер таблицы необходимо определить простым числом.
		// Возможность ценой небольших затрат придать реальным ключам случайный вид приводит к рассмотрению рандомизованных алгоритмов хеширования — нам требуются хеш - функции, которые создают случайные индексы таблицы независимо от существующих ключей.
		// Еще более эффективный подход использование случайных значений коэффициентов в вычислении и другого случайного значения для каждой цифры ключа.
		// Такой подход дает рандомизованный алгоритм, называемый универсальным хешированием.
		// Теоретически идеальная универсальная хеш-функция — это функция, для которой вероятность конфликта между двумя различными ключами в таблице размером М равна в точности 1/M.
		// Подведем итоги : чтобы использовать хеширование для реализации абстрактной таблицы символов, в качестве первого шага необходимо расширить интерфейс абстрактного типа, включив в него операции hash, которая отображает ключи на неотрицательные целые числа, меньше размера таблицы М.
		// ---
		// inline int hash (Key v, int M) 
		// { return (int)M*(v - s) / (t - s); }
		// ---
		// (int) (.616161 * (float) v) % М
		// ---
		// (6161 * (unsigned) v) % М 
		// Все эти функции, включая программу 14.1, работающую со строковыми ключами, проверены временем; они равномерно распределяют ключи и служат программистам в течение многих лет.
		// Универсальный метод, предртавленный в программе 14.2 — заметное усовершенствование для строковых ключей, которое обеспечивает случайные хеш - значения при небольших затратах; аналогичные рандомизованные методы можно применить к целочисленным ключам.
		// Несмотря на очевидные преимущества рассмотренных методов, их реализация требует внимания по двум причинам.
		// Во-первых, необходимо быть внимательным во избежание ошибок при преобразовании типов и использовании арифметических функций применительно к различным машинным представлениям ключей.
		// Во-вторых, весьма вероятно, что во многих приложениях вычисление хеш - функции будет выполняться во внутреннем цикле и время ее выполнения может в значительной степени определять общее время выполнения.
		// Наиболее быстрый метод для многих компьютеров — сделать М степенью 2 и воспользоваться хеш - функцией
		// inline int hash(Key v, int M)
		// {
		//	 return v & (M - l);
		// }

		// 14.2 Раздельное связывание
		// второй компонент алгоритма хеширования — определения способа обработки случая, когда два ключа представляются одним и тем же адресом.
		// Самый прямой метод — построить для каждого адреса таблицы связный список элементов, ключи которых отображаются на этот адрес.
		// Лемма 14.1 Раздельное связывание уменьшает количество выполняемых при последовательном поиске сравнений в М раз(в среднем) при использовании дополнительного объема памяти для М связей.
		// Лемма 14.2 В хеш-таблице, использующей раздельное связывание, содержащей М списков и N ключей, вероятность того, что количество ключей в каждом списке незначительно отличается от N / M, очень близка к 1.
		// Приведенный анализ — пример классической задачи занятости, при которой рассматривается N мячей, произвольно забрасываемых в одну из М корзин, и анализируется распределение мячей по корзинам.
		// Когда объем памяти не является критичным, значение М может быть выбрано достаточно большим, чтобы время поиска было постоянным; когда же объем памяти критичен, все же можно повысить производительность в М раз, выбрав значение М максимально допустимым.
		// В общем случае хеширование не подходит для использования в приложениях, в которых требуются реализации операций sort и select для АТД.
		// Однако хеширование часто используется в типовых ситуациях, когда необходимо использовать таблицу символов с потенциально большим количеством операций search, insert и remove с последующим однократным выводом элементов в порядке их ключей.
		
		// 14.3 Линейное зондирование 
		// Существует несколько методов хранения N элементов в таблице размером М > N, при которых разрешение конфликтов основывается на наличии пустых мест в таблице.
		// Такие методы называются методами хеширования с открытой адресацией.
		// Простейший метод открытой адресации называется линейным зондированием (linear probing):
		// при наличии конфликта(когда хеширование выполняется в место таблицы, которое уже занято элементом с ключом, не совпадающим с ключом поиска) мы просто проверяем следующую позицию в таблице.
		// Обычно подобную проверку(определяющую, содержит ли данная позиция таблицы элемент с ключом, равным ключу поиска) называют зондированием(probe).
		// ...583
	}
}
