#pragma once

// Анализ
namespace nsAnalysis
{
	void main();

	// 1.1 Алгоритмы
	
	// 1.2 Пример задачи : связность
	// Предположим, что имеется последовательность пар целых чисел, в которой каждое целое число представляет объект некоторого типа, а пара p - q интерпретируется в значении "р связано с q".
	// Задача состоит в написании программы для исключения лишних пар из набора : когда программа вводит пару р - q, она должна выводить эту пару только в том случае, если просмотренные до данного момента пары не предполагают, что р связано с q.
	// в этой главе без ущерба для общности можно предположить, что имеется N объектов с целочисленными именами от 0 до N - 1.
	// Входной набор пар называется графом(Graph), а выходной набор пар — остовным деревом (spanning tree) этого графа, которое связывает все объекты.
	// разработаем алгоритмы и структуры данных, которые могут:
	// - находить набор, содержащий данный элемент
	// - замещать наборы, содержащие два данных элемента, их объединением
	// Задача связности легко решается посредством абстрактных операций find (поиск) и union (объединение).
	// После считывания новой пары p-q из ввода мы выполняем операцию find для каждого члена пары.Если члены пары находятся в одном наборе, мы переходим к следующей паре; если нет, то выполняем операцию union и записываем пару.
	// Наборы представляют связанные компоненты: поднаборы объектов, характеризующиеся тем, что любые два объекта в данном компоненте связаны. Этот подход сводит разработку алгоритмического решения задачи связности к задачам определения структуры данных, которая представляет наборы, и разработке алгоритмов union и find, которые эффективно используют эту структуру данных.
	// 27
}
