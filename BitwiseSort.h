#pragma once

namespace nsSorting
{
	// Поразрядная сортировка
	namespace nsBitwiseSort
	{
		void main();

		const int bitsword = 32;
		const int bitsbyte = 8;
		const int bytesword = bitsword / bitsbyte;
		const int R = 1 << bitsbyte;

		inline int digit(long A, int B);
		inline int digit(char* A, int B);
		
		template<typename Item>
		inline int digit(Item& A, int B)
		{
			return A.str[B];
		}


		// В данной главе мы займемся изучением еще одной абстракции, отличной от рассмотренных выше, применительно к ключам сортировки.
		// Например, довольно часто нет необходимости в обработке ключей в полном объеме на каждом этапе:
		// чтобы найти телефонный номер какого - либо конкретного абонента вполне достаточно проверить несколько первых букв его фамилии, чтобы найти страницу, на которой на ходится искомый номер.
		// Методы сортировки, построенные на обработке чисел по одной порции за раз, называются поразрядными(radix) методами сортировки.
		// Эти методы не только выполняют сравнение ключей : они обрабатывают и сравнивают соответствующие части ключей.
		// Алгоритмы поразрядной сортировки рассматривают ключи как числа, представленные в системе счисления с основанием R при различных значениях R(основание системы счисления), и работают с отдельными цифрами чисел.
		// В основе алгоритмов поразрядной сортировки лежит абстрактная операция извлечь из ключа i-ю цифру.
		// Существуют два принципиально различных базовых подхода к поразрядной сортировке.
		// - Первый класс методов составляют алгоритмы, которые анализируют значение цифр в ключах в направлении слева направо, при этом первыми обрабатываются наиболее значащие цифры.
		// Такие методы в общем случае называются поразрядной сортировкой MSD(most significant digit radix sort - Поразрядная сортировка сначала по старшей цифре).
		// В самом деле, в условиях, когда в качестве основания системы счисления выбрана 2, мы реализуем поразрядную сортировку MSD тем же способом, что и быструю сортировку.
		// - Во втором классе методов поразрядной сортировки используется другой принцип :
		// они анализируют цифры ключей в направлении справа налево, работая с сначала с наименее значащей цифрой.
		// Эти методы в общем случае называются поразрядной сортировкой LSD(least significant digit radix sort - Поразрядная сортировка сначала по младшей цифре).
		
		// 10.1. Биты, байты и слова 
		// Ключевое условие для понимания сути поразрядной сортировки состоит в признании того, что
		// 1) компьютеры в общем случае ориентированы на обработку групп битов, называемых машинными словами, которые в свою очередь часто объединяются в небольшие фрагменты, называемые байтами;
		// 2) ключи сортировки обычно также организуются в последовательности байтов;
		// 3) короткие последовательности байтов могут также служить индексами массивов или машинными адресами.
		// Определение 10.1. Байт представляет собой последовательность битов фиксированной длины, строка есть последовательность байтов переменной длины, слово есть последовательность байтов фиксированной длины.
		// В большинстве компьютеров реализованы битовые операции и(and) и сдвиг(shift), которыми мы можем воспользоваться для извлечения отдельных байтов из слов.
		// В C++ мы можем прямо написать операции извлечения B-ого байта из двоичного A слова следующим образом:
		// Определение 10.2. Ключ есть число в системе счисления с основанием R, цифры которого пронумерованы слева(начиная с 0).
		// В самом деле, расчеты, связанные подсчетом индексных ключей, лежат в основе базовых методов поразрядной сортировки MSD и LSD.
		// Поразрядная сортировка вступает на передний план, когда ключи обладают достаточной длиной(скажем, w = 64), когда использование таблицы размером 2^w не является целесообразным.

		// 10.2.Двоичная быстрая сортировка
		// 
	}
}
