#pragma once

namespace nsSearch
{
	// Внешний поиск 
	namespace nsExternalSearch
	{
		void main();

		// В основном нас будут интересовать методы поиска в очень больших файлах, хранящихся на внешних устройствах наподобие дисков, которые обеспечивают быстрый доступ к произвольным блокам данных.
		// Для дисковых устройств можно воспользоваться гораздо более эффективным подходом:
		// как ни удивительно, методы, которые мы изучим, могут поддерживать операции search и insert в таблицах символов, содержащих миллиарды и триллионы элементов, при использовании всего трех - четырех ссылок на блоки данных на диске.
		
		// 16.1 Правила игры 
		// Определение 16.1 Страница — это непрерывный блок данных. Зондирование — это первое обращение к странице.
		// Для очень больших наборов данных индексы имеют первостепенное значение:
		// в основном, копии основных данных не создаются не только потому, что невозможно выделить дополнительный объем памяти, но и потому, что желательно избежать проблем, связанных с подержанием целостности данных в условиях присутствия нескольких копий.
		
		// 16.2 Индексированный последовательный доступ 
		// Прямой подход к построению индекса заключается в сохранении массива со ссылками на ключи и элементы, упорядоченного по ключам, с последующим использованием бинарного поиска для реализации операции search.
		// Лемма 16.1 Для выполнения поиска в индексном последовательном файле требуется выполнение только постоянного количества зондирований, однако вставка может быть сопряжена с перестройкой всего индекса.
		
		// 16.3 В-деревья 
		// В этом разделе мы рассмотрим реализацию, которая
		// - обобщает 2-3-4-деревья до деревьев, имеющих от М/2 до М узлов
		// - представляет многопутевые узлы при помощи массива элементов и связей
		// - реализует индекс, а не структуру поиска, содержащую элементы
		// - выполняет восходящее разделение
		// - отделяет индексы от элементов
		// Определение 16.2 В-дерево порядка М — это дерево, которое либо пусто, либо состоит из k - узлов с к - 1 ключами и к связями с деревьями, представляющими каждый из k ограниченных ключами интервалов, и обладающее следующими структурными свойствами:
		// - k должно находиться в интервале между 2 и М для корня и между М / 2 и М для любого другого узла;
		// - все связи с пустыми деревьями должны находиться на равном расстоянии от корня.
		// Каждый узел в В-дереве содержит массив и счетчик количества активных записей в массиве.
		// Каждая запись массива представляет собой ключ, элемент и связь с узлом.
		// Во внутренних узлах используются только ключи и связи; во внешних узлах используются только ключи и элементы.
		// Новые узлы инициализируются в виде пустых узлов путем установки значения поля счетчика равным 0.
		// Лемма 16.2 Для выполнения поиска или вставки в В - дереве порядка М, содержащем N элементов, требуется от log_M(N) до log_(M/2)(N) зондирований — число, которое на практике можно считать постоянным.
		// Лемма 16.3 В-дерево порядка М, сконструированное из N случайных элементов, предположительно должно иметь около 1.44*N/M страниц.
		
		// 16.4 Расширяемое хеширование 
		// Расширяемая хеш-таблица — это каталог ссылок на страницы (подобно внешним узлам в В - деревьях), который содержит до 2М элементов.
		// Каждая страница содержит также счетчик(т) количества элементов на странице и целочисленное значение(к), указывающее количество ведущих разрядов, которые должны совпадать в ключах элементов.
		// Как обычно, N — количество элементов в таблице.
		// Переменная d определяет количество разрядов, которые используются для индексации в каталоге, a D — количество записей в каталоге; таким образом, D = 2^d.
		// Вначале таблица устанавливается соответствующей каталогу размера 1, который указывает на пустую страницу.
		// Для поддержки операции insert структура данных должна быть несколько более сложной, но одно из ее свойств заключается в том, что этот алгоритм поиска успешно работает без каких - либо модификаций.Чтобы обеспечить поддержку операции insert, необходимо ответить н а следующие вопросы :
		// - Что делать, когда количество элементов на странице превышает ее емкость?
		// - Какой размер каталога следует использовать?
		// - Что делать, когда необходимо вставить элемент в заполненную страницу?
		// Определение 16.3 Расширяемая хеш-таблица порядка d представляет собой каталог из 2^d ссылок на страницы, которые содержат до М элементов с ключами.
		// Первые k разрядов элементов на каждой странице совпадают, а каталог содержит 2^(d-k) указателей на страницу, начинающихся с ячейки, указанной ведущими к разрядами в ключах на страницах.
		// Для поддержания этих характеристик в процессе разрастания таблицы мы используем две базовые операции:
		// разделение страницы, при котором некоторые ключи с полной страницы переносятся на другую страницу, и разделение каталога, при котором размер каталога удваивается, а значение d увеличивается на 1.
		// Лемма 16.4 Расширяемая хеш-таблица, построенная из набора ключей, зависит только от значений этих ключей и не зависит от порядка их вставки.
		// Лемма 16.5 При использовании страниц, которые могут содержать М элементов, для реализации расширяемого хеширования для файла, содержащего N элементов, в среднем требуется около 1.44*(N / M) страниц.
		// Ожидаемое количество записей в каталоге приблизительно равно 3.92(N^(1/M))*(N / M).
		
		// 16.5 Перспективы 
	}
}
