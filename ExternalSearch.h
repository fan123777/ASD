#pragma once

namespace nsSearch
{
	// Внешний поиск 
	namespace nsExternalSearch
	{
		void main();

		// В основном нас будут интересовать методы поиска в очень больших файлах, хранящихся на внешних устройствах наподобие дисков, которые обеспечивают быстрый доступ к произвольным блокам данных.
		// Для дисковых устройств можно воспользоваться гораздо более эффективным подходом:
		// как ни удивительно, методы, которые мы изучим, могут поддерживать операции search и insert в таблицах символов, содержащих миллиарды и триллионы элементов, при использовании всего трех - четырех ссылок на блоки данных на диске.
		
		// 16.1 Правила игры 
		// Определение 16.1 Страница — это непрерывный блок данных. Зондирование — это первое обращение к странице.
		// Для очень больших наборов данных индексы имеют первостепенное значение:
		// в основном, копии основных данных не создаются не только потому, что невозможно выделить дополнительный объем памяти, но и потому, что желательно избежать проблем, связанных с подержанием целостности данных в условиях присутствия нескольких копий.
		
		// 16.2 Индексированный последовательный доступ 
		// Прямой подход к построению индекса заключается в сохранении массива со ссылками на ключи и элементы, упорядоченного по ключам, с последующим использованием бинарного поиска для реализации операции search.
		// Лемма 16.1 Для выполнения поиска в индексном последовательном файле требуется выполнение только постоянного количества зондирований, однако вставка может быть сопряжена с перестройкой всего индекса.
		
		// 16.3 В-деревья 
		// В этом разделе мы рассмотрим реализацию, которая
		// - обобщает 2-3-4-деревья до деревьев, имеющих от М/2 до М узлов
		// - представляет многопутевые узлы при помощи массива элементов и связей
		// - реализует индекс, а не структуру поиска, содержащую элементы
		// - выполняет восходящее разделение
		// - отделяет индексы от элементов
		// ...653
	}
}
